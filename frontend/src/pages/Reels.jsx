import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { SparklesCore } from '../components/ui/sparkles';
import { GlowingEffect } from '../components/ui/GlowingEffect';
import { 
  ChevronUp, 
  ChevronDown, 
  Heart, 
  MessageCircle, 
  Share2, 
  Plus, 
  Music, 
  User,
  ArrowLeft,
  Upload,
  X,
  Video,
  Camera,
  AlertCircle,
  VolumeX,
  Volume2
} from 'lucide-react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import { API_URL } from '../config/constants';
import { toast, Toaster } from 'react-hot-toast';

// Utility function to convert boolean attributes to strings
// This prevents React warnings about non-boolean attributes
const convertBooleanProps = (props) => {
  const result = { ...props };
  // List of attributes that might be passed as booleans but need to be strings
  const attributesToConvert = ['jsx', 'global'];
  
  attributesToConvert.forEach(attr => {
    if (attr in result && typeof result[attr] === 'boolean') {
      result[attr] = result[attr].toString();
    }
  });
  
  return result;
};

// Video uzantÄ±sÄ± icÌ§in izin verilen dosya tuÌˆrleri
const ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/quicktime', 'video/x-msvideo'];
// Maksimum dosya boyutu (20MB)
const MAX_FILE_SIZE = 20 * 1024 * 1024;

// Yedek video verisi - API'den veri cÌ§ekilemedigÌ†inde goÌˆsterilir
const FALLBACK_REELS = [
  {
    id: 1,
    user: {
      username: 'ahmetk',
      profileImage: 'https://randomuser.me/api/portraits/men/32.jpg',
    },
    videoURL: 'https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4', // GuÌˆvenilir ve acÌ§Ä±k kaynak test videosu
    caption: 'Yeni dans rutini #dans #muÌˆzik',
    likeCount: 1204,
    commentCount: 89,
    shareCount: 32,
    music: 'SÌ§arkÄ± - SanatcÌ§Ä± AdÄ±',
    isLiked: false,
  },
  {
    id: 2,
    user: {
      username: 'melisaz',
      profileImage: 'https://randomuser.me/api/portraits/women/44.jpg',
    },
    videoURL: 'https://storage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4', // BasÌ§ka bir test videosu
    caption: 'Yaz tatili basÌ§lasÄ±n #yaz #havuz #tatil',
    likeCount: 2530,
    commentCount: 112,
    shareCount: 45,
    music: 'Yaz SÌ§arkÄ±sÄ± - Pop YÄ±ldÄ±zÄ±',
    isLiked: false,
  },
];

// Mesaj cÌ§ubugÌ†u bilesÌ§eni
const AuthRequiredBanner = ({ onLogin }) => (
  <motion.div
    className="fixed top-0 left-0 right-0 p-4 bg-gradient-to-r from-purple-500 to-blue-500 text-white z-50"
    initial={{ y: -100 }}
    animate={{ y: 0 }}
    transition={{ type: 'spring', stiffness: 500, damping: 25 }}
  >
    <div className="flex items-center justify-between max-w-4xl mx-auto">
      <p className="text-sm md:text-base">
        Reels'i tam olarak deneyimlemek icÌ§in girisÌ§ yapÄ±n
      </p>
      <motion.button
        className="px-4 py-2 bg-white text-purple-600 rounded-full text-sm font-medium"
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={onLogin}
      >
        GirisÌ§ Yap
      </motion.button>
    </div>
  </motion.div>
);

const Reels = () => {
  const navigate = useNavigate();
  const { user, token } = useAuth();
  const [currentReelIndex, setCurrentReelIndex] = useState(0);
  const [activeTab, setActiveTab] = useState('explore'); // 'following' veya 'explore'
  const [reels, setReels] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const videoRefs = useRef([]);
  const [showShareModal, setShowShareModal] = useState(false);
  const fileInputRef = useRef(null);
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewURL, setPreviewURL] = useState(null);
  const [reelCaption, setReelCaption] = useState("Yeni reel #video");
  const [reelMusic, setReelMusic] = useState('KullanÄ±cÄ± seÃ§imi');
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  const [muted, setMuted] = useState({});
  const [videoErrors, setVideoErrors] = useState({});
  const reelsContainerRef = useRef(null);

  // Token durumunu debug icÌ§in console'a yazdÄ±r
  useEffect(() => {
    console.log('Reels - Oturum durumu:', { 
      userExists: !!user, 
      tokenValue: token, 
      tokenType: typeof token 
    });
  }, [user, token]);

  // API istegÌ†i oÌˆncesi token kontroluÌˆ yapmak icÌ§in yardÄ±mcÄ± fonksiyon
  const secureApiRequest = async (requestFn, fallbackValue = null) => {
    if (!token) {
      toast.error('Bu isÌ§lem icÌ§in girisÌ§ yapmanÄ±z gerekiyor');
      return fallbackValue;
    }
    
    try {
      return await requestFn();
    } catch (err) {
      if (err.response && err.response.status === 401) {
        toast.error('Oturum suÌˆreniz doldu, luÌˆtfen tekrar girisÌ§ yapÄ±n');
        // AuthContext'ten logout fonksiyonunu cÌ§agÌ†Ä±rabilirsiniz
        // logout();
        navigate('/login');
      }
      throw err; // Hata isÌ§leme icÌ§in yeniden fÄ±rlat
    }
  };

  // API'den reels verilerini getir
  const fetchReels = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('fetchReels - token durumu:', !!token);
      
      // Burada token kontroluÌˆ yap
      if (!token) {
        // Token yoksa API cÌ§agÌ†rÄ±sÄ± yapma, yedek verileri goÌˆster
        console.info("ðŸ‘¤ KullanÄ±cÄ± oturum acÌ§mamÄ±sÌ§ - Yedek Reels verileri goÌˆsteriliyor");
        setReels(FALLBACK_REELS);
        setLoading(false);
        return;
      }
      
      const feedType = activeTab === 'following' ? 'following' : 'explore';
      
      const response = await secureApiRequest(() => 
        axios.get(`${API_URL}/reels?feed=${feedType}`, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        })
      );
      
      if (!response) {
        // secureApiRequest tarafÄ±ndan hata durumunda null doÌˆnebilir
        setReels(FALLBACK_REELS);
        setLoading(false);
        return;
      }
      
      if (response.data.success && response.data.data.length > 0) {
        // KullanÄ±cÄ±nÄ±n kendi videolarÄ±nÄ± goÌˆster
        console.log('KullanÄ±cÄ± videolarÄ± yuÌˆklendi:', response.data.data.length);
        
        // API'den gelen videolar icÌ§in id'leri string'e doÌˆnuÌˆsÌ§tuÌˆr
        const userReels = response.data.data.map(reel => ({
          ...reel,
          id: String(reel.id)
        }));
        
        // Sadece kullanÄ±cÄ±nÄ±n kendi videolarÄ±nÄ± goÌˆster (fallback videolar olmadan)
        setReels(userReels);
      } else {
        // API basÌ§arÄ±lÄ± ancak veri yoksa yedek verileri goÌˆster
        toast.error('HenuÌˆz reel icÌ§erigÌ†i bulunamadÄ±');
        setReels(FALLBACK_REELS);
      }
    } catch (err) {
      console.error('Reels getirme hatasÄ±:', err);
      
      // 401 hatasÄ±nÄ± oÌˆzellikle kontrol et
      if (err.response && err.response.status === 401) {
        toast.error('Oturum suÌˆresi doldu, luÌˆtfen tekrar girisÌ§ yapÄ±n');
        // Burada ilave aksiyon olarak logout cÌ§agÌ†rÄ±labilir
      } else {
        setError('Reels yuÌˆklenirken bir hata olusÌ§tu. LuÌˆtfen tekrar deneyin.');
      }
      
      setReels(FALLBACK_REELS); // Hata durumunda yedek verileri goÌˆster
    } finally {
      setLoading(false);
    }
  };

  // Sekme degÌ†isÌ§tigÌ†inde reelsleri guÌˆncelle
  useEffect(() => {
    setCurrentReelIndex(0); // Sekme degÌ†isÌ§tigÌ†inde ilk reele git
    fetchReels();
  }, [activeTab, token]);

  // GecÌ§erli videonun referansÄ±nÄ± ayarla
  useEffect(() => {
    videoRefs.current = videoRefs.current.slice(0, reels.length);
  }, [reels]);

  // Video degÌ†isÌ§tigÌ†inde oynatma/durdurma
  useEffect(() => {
    const playCurrentVideo = async () => {
      for (let i = 0; i < videoRefs.current.length; i++) {
        if (videoRefs.current[i]) {
          if (i === currentReelIndex) {
            try {
              // Oynatmadan oÌˆnce video hazÄ±r mÄ± kontrol et
              if (videoRefs.current[i].readyState >= 2) { // HAVE_CURRENT_DATA veya daha yuÌˆksek
                await videoRefs.current[i].play();
              } else {
                // Video hazÄ±r degÌ†ilse, canplay olayÄ±nÄ± dinle
                videoRefs.current[i].addEventListener('canplay', async () => {
                  try {
                    await videoRefs.current[i]?.play();
                  } catch (innerErr) {
                    console.warn('Video oynatma icÌ§ hatasÄ±:', innerErr);
                  }
                }, { once: true }); // Olay bir kez tetiklensin
              }
            } catch (err) {
              console.error('Video oynatma hatasÄ±:', err);
              
              // KullanÄ±cÄ±ya bilgi ver
              if (err.name === 'NotSupportedError') {
                toast.error('Video formatÄ± desteklenmiyor. FarklÄ± bir video deneyin.');
              } else if (err.name === 'NotAllowedError') {
                toast.info('Otomatik oynatma engellendi. Videoyu basÌ§latmak icÌ§in tÄ±klayÄ±n.');
              }
            }
          } else {
            videoRefs.current[i].pause();
            videoRefs.current[i].currentTime = 0;
          }
        }
      }
    };

    playCurrentVideo();
  }, [currentReelIndex]);

  // Reels kaydÄ±rma isÌ§levi
  const handleScroll = (direction) => {
    if (direction === 'up' && currentReelIndex > 0) {
      setCurrentReelIndex(currentReelIndex - 1);
    } else if (direction === 'down' && currentReelIndex < reels.length - 1) {
      setCurrentReelIndex(currentReelIndex + 1);
    }
  };

  // Like isÌ§levi
  const handleLike = async (reelId) => {
    // Token kontroluÌˆ
    if (!token) {
      toast.error('Bu isÌ§lem icÌ§in girisÌ§ yapmanÄ±z gerekiyor');
      return;
    }
    
    const reel = reels.find(r => r.id === reelId);
    if (!reel) return;
    
    try {
      if (!reel.isLiked) {
        await secureApiRequest(() => 
          axios.post(`${API_URL}/reels/${reelId}/like`, {}, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
        );
        
        // UI'Ä± guÌˆncelle
        setReels(reels.map(r => 
          r.id === reelId 
            ? { ...r, isLiked: true, likeCount: r.likeCount + 1 } 
            : r
        ));
      } else {
        await secureApiRequest(() => 
          axios.delete(`${API_URL}/reels/${reelId}/like`, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
        );
        
        // UI'Ä± guÌˆncelle
        setReels(reels.map(r => 
          r.id === reelId 
            ? { ...r, isLiked: false, likeCount: r.likeCount - 1 } 
            : r
        ));
      }
    } catch (err) {
      console.error('BegÌ†eni isÌ§lemi sÄ±rasÄ±nda hata:', err);
      toast.error('BegÌ†eni isÌ§lemi sÄ±rasÄ±nda bir hata olusÌ§tu');
    }
  };

  // PaylasÌ§Ä±m isÌ§levi
  const handleShare = async (reelId) => {
    try {
      await secureApiRequest(() => 
        axios.post(`${API_URL}/reels/${reelId}/share`, {}, {
          headers: {
            Authorization: `Bearer ${token}`
          }
        })
      );
      
      // UI'Ä± guÌˆncelle
      setReels(reels.map(r => 
        r.id === reelId 
          ? { ...r, shareCount: r.shareCount + 1 } 
          : r
      ));
      
      toast.success('Reel paylasÌ§Ä±ldÄ±!');
    } catch (err) {
      console.error('PaylasÌ§Ä±m sÄ±rasÄ±nda hata:', err);
      toast.error('PaylasÌ§Ä±m sÄ±rasÄ±nda bir hata olusÌ§tu');
    }
  };

  // Dokunmatik kaydÄ±rma isÌ§levselligÌ†i
  const touchStartY = useRef(null);

  const handleTouchStart = (e) => {
    touchStartY.current = e.touches[0].clientY;
  };

  const handleTouchEnd = (e) => {
    if (!touchStartY.current) return;

    const touchEndY = e.changedTouches[0].clientY;
    const diff = touchStartY.current - touchEndY;

    if (Math.abs(diff) > 50) { // Minimum kaydÄ±rma mesafesi
      if (diff > 0) {
        // AsÌ§agÌ†Ä± kaydÄ±r
        handleScroll('down');
      } else {
        // YukarÄ± kaydÄ±r
        handleScroll('up');
      }
    }

    touchStartY.current = null;
  };

  // Touchpad ve fare tekerlegÌ†i ile kaydÄ±rma isÌ§levselligÌ†i
  const handleWheel = (e) => {
    // DogÌ†al kaydÄ±rma davranÄ±sÌ§Ä±nÄ± engelle
    e.preventDefault();
    
    // Touchpad veya fare tekerlegÌ†i ile yukarÄ±/asÌ§agÌ†Ä± kaydÄ±rma
    if (e.deltaY > 20) {
      // AsÌ§agÌ†Ä± kaydÄ±rma - bir sonraki reel'e gecÌ§
      handleScroll('down');
    } else if (e.deltaY < -20) {
      // YukarÄ± kaydÄ±rma - bir oÌˆnceki reel'e gecÌ§
      handleScroll('up');
    }
  };

  // Fare ve touchpad kaydÄ±rma isÌ§levselligÌ†ini etkinlesÌ§tir
  useEffect(() => {
    // Reels konteynerini al
    const reelsContainer = document.getElementById('reels-container');
    
    if (reelsContainer) {
      // Wheel (kaydÄ±rma) olayÄ±nÄ± dinlemeye basÌ§la
      reelsContainer.addEventListener('wheel', handleWheel, { passive: false });
      
      // Temizleme fonksiyonu
      return () => {
        reelsContainer.removeEventListener('wheel', handleWheel);
      };
    }
  }, [currentReelIndex, reels.length]);

  // handleVideoLoad fonksiyonunu duÌˆzenliyorum
  const handleVideoLoad = (index) => {
    console.log(`Video ${index} yuÌˆklendi`);
    
    // Video yuÌˆkleme basÌ§arÄ±lÄ± oldugÌ†unda hata durumunu temizle
    setVideoErrors(prev => ({
      ...prev,
      [index]: false
    }));
    
    // Otomatik oynatmayÄ± basÌ§lat
    if (index === currentReelIndex && videoRefs.current[index]) {
      videoRefs.current[index].play().catch(err => {
        console.warn('Otomatik oynatma basÌ§latÄ±lamadÄ±:', err);
        
        // Hata durumunda sessiz modda oynatmayÄ± dene
        if (err.name === 'NotAllowedError') {
          setMuted(prev => ({ ...prev, [index]: true }));
          videoRefs.current[index].muted = true;
          videoRefs.current[index].play().catch(e => 
            console.error('Sessiz modda da oynatÄ±lamadÄ±:', e)
          );
        }
      });
    }
  };

  // Video oynatma/duraklatma isÌ§levi
  const togglePlay = (index) => {
    if (!videoRefs.current[index]) return;
    
    if (videoRefs.current[index].paused) {
      videoRefs.current[index].play()
        .then(() => {
          console.log(`Video ${index} basÌ§latÄ±ldÄ±`);
        })
        .catch(err => {
          console.error(`Video ${index} basÌ§latÄ±lamadÄ±:`, err);
          toast.error('Video oynatÄ±lÄ±rken bir hata olusÌ§tu');
        });
    } else {
      videoRefs.current[index].pause();
      console.log(`Video ${index} duraklatÄ±ldÄ±`);
    }
  };

  // Ses acÌ§ma/kapatma fonksiyonu
  const toggleMute = (index) => {
    setMuted(prev => ({ 
      ...prev, 
      [index]: !prev[index] 
    }));
    
    // Video referansÄ±nÄ± guÌˆncelle
    if (videoRefs.current[index]) {
      videoRefs.current[index].muted = !videoRefs.current[index].muted;
    }
  };

  // Klavye tusÌ§larÄ±yla gezinme
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'ArrowUp') {
        handleScroll('up');
      } else if (e.key === 'ArrowDown') {
        handleScroll('down');
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [currentReelIndex]);

  // KuÌˆcÌ§uÌˆltuÌˆlmuÌˆsÌ§ sayÄ± formatÄ±
  const formatNumber = (num) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'K';
    }
    return num.toString();
  };

  // Tab gecÌ§isÌ§ varyantlarÄ±
  const tabVariants = {
    inactive: { 
      opacity: 0.5,
      scale: 0.95,
      y: 0,
      transition: { duration: 0.2 }
    },
    active: { 
      opacity: 1,
      scale: 1,
      y: 0,
      transition: { duration: 0.2 }
    }
  };

  // Sekme altÄ± cÌ§izgi varyantlarÄ±
  const underlineVariants = {
    inactive: { 
      opacity: 0,
      width: '0%',
      transition: { duration: 0.2 }
    },
    active: { 
      opacity: 1,
      width: '70%',
      transition: { duration: 0.2 }
    }
  };

  // Dosya yuÌˆkleme fonksiyonu
  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    // Dosya tuÌˆruÌˆ kontroluÌˆ
    if (!ALLOWED_VIDEO_TYPES.includes(file.type)) {
      toast.error(`Desteklenmeyen dosya tuÌˆruÌˆ. Desteklenen tuÌˆrler: ${ALLOWED_VIDEO_TYPES.join(', ')}`);
      return;
    }
    
    // Dosya boyutu kontroluÌˆ
    if (file.size > MAX_FILE_SIZE) {
      toast.error(`Dosya boyutu cÌ§ok buÌˆyuÌˆk. Maksimum boyut: ${MAX_FILE_SIZE / (1024 * 1024)}MB`);
      return;
    }
    
    try {
      // OÌˆnce modal'Ä± kapat
      setShowShareModal(false);
      
      // GecÌ§ici bir URL olusÌ§tur ve oÌˆnizleme modalÄ± goÌˆster
      setShowPreviewModal(true);
      setSelectedFile(file);
      setPreviewURL(URL.createObjectURL(file));
      
      // KullanÄ±cÄ±ya gelisÌ§tirme durumu hakkÄ±nda bilgi ver
      toast.success('Video basÌ§arÄ±yla secÌ§ildi! OÌˆnizleme modunu kullanabilirsiniz.');
      
    } catch (err) {
      console.error('Dosya isÌ§leme hatasÄ±:', err);
      toast.error('Dosya isÌ§lenirken bir hata olusÌ§tu.');
    }
  };
  
  // Video secÌ§me fonksiyonu
  const handleSelectVideo = () => {
    fileInputRef.current.click();
  };

  // Kamera acÌ§ma fonksiyonu
  const handleOpenCamera = () => {
    toast.error("Kamera oÌˆzelligÌ†i sÌ§u anda gelisÌ§tiriliyor!");
  };

  // Video yuÌˆkleme ve reel olusÌ§turma
  const submitReel = async () => {
    if (!selectedFile) return;
    
    toast.loading('Video yuÌˆkleniyor...');
    setShowPreviewModal(false);
    
    try {
      // Form verisi olusÌ§tur
      const formData = new FormData();
      formData.append('video', selectedFile);
      
      // Videoyu upload API'sine yuÌˆkle
      const uploadResponse = await secureApiRequest(() => 
        axios.post(`${API_URL}/upload/video`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
            Authorization: `Bearer ${token}`
          }
        })
      );
      
      if (!uploadResponse) {
        toast.dismiss();
        toast.error('Video yuÌˆklenirken bir hata olusÌ§tu. LuÌˆtfen tekrar deneyin.');
        return;
      }
      
      if (uploadResponse.data.success) {
        toast.dismiss();
        toast.success('Video basÌ§arÄ±yla yuÌˆklendi! Reel olusÌ§turuluyor...');
        
        // SÌ§imdi reel olusÌ§tur
        const reelData = {
          caption: reelCaption || "Yeni reel #video",
          videoURL: uploadResponse.data.data.videoUrl,
          music: reelMusic || 'KullanÄ±cÄ± secÌ§imi',
          duration: 15
        };
        
        const reelResponse = await secureApiRequest(() => 
          axios.post(`${API_URL}/reels`, reelData, {
            headers: {
              Authorization: `Bearer ${token}`
            }
          })
        );
        
        if (reelResponse && reelResponse.data.success) {
          toast.success('Reel basÌ§arÄ±yla olusÌ§turuldu!');
          
          // Form verilerini temizle
          setSelectedFile(null);
          if (previewURL) {
            URL.revokeObjectURL(previewURL);
            setPreviewURL(null);
          }
          setReelCaption("Yeni reel #video");
          setReelMusic('KullanÄ±cÄ± secÌ§imi');
          
          // Reelleri yeniden yuÌˆkle
          fetchReels();
        } else {
          toast.error('Reel olusÌ§turulurken bir hata olusÌ§tu.');
        }
      } else {
        toast.dismiss();
        toast.error(uploadResponse.data.message || 'Video yuÌˆklenirken bir hata olusÌ§tu.');
      }
    } catch (error) {
      console.error("Video upload hatasÄ±:", error);
      toast.dismiss();
      toast.error('Bir hata olusÌ§tu: ' + (error.response?.data?.message || error.message || 'Bilinmeyen bir hata'));
      
      // Form verilerini temizle
      setSelectedFile(null);
      if (previewURL) {
        URL.revokeObjectURL(previewURL);
        setPreviewURL(null);
      }
    }
  };

  // Dosya secÌ§ildigÌ†inde
  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    setSelectedFile(file);
    setPreviewURL(URL.createObjectURL(file));
    setShowPreviewModal(true);
  };

  // URL yardÄ±mcÄ± fonksiyonu
  const getProperVideoURL = (url) => {
    if (!url) return "https://www.w3schools.com/html/mov_bbb.mp4";
    
    // Debug icÌ§in URL'yi konsola yazdÄ±r
    console.log('Orijinal video URL:', url);
    
    // URL http(s): ile basÌ§lÄ±yorsa dÄ±sÌ§ kaynak olarak dogÌ†rudan kullan
    if (url.startsWith('http')) {
      console.log('DÄ±sÌ§ kaynak video kullanÄ±lÄ±yor:', url);
      return url;
    }
    
    // URL'yi analiz et - backend'deki video servis edilme yoÌˆntemine goÌˆre duÌˆzeltme yap
    if (url.startsWith('/uploads/videos/')) {
      // Dosya adÄ±nÄ± yoldan cÌ§Ä±kar
      const fileName = url.split('/').pop();
      const fullUrl = `${API_URL.replace('/api', '')}/uploads/videos/${fileName}`;
      console.log('Static dosya sunucusu URL olusÌ§turuldu:', fullUrl);
      return fullUrl;
    }
    
    // API URL'sini videos endpoint'i ile kullan
    if (url.startsWith('/') && url.includes('videos/')) {
      const fileName = url.split('/').pop();
      const fullUrl = `${API_URL}/videos/${fileName}`;
      console.log('API videos endpoint URL olusÌ§turuldu:', fullUrl);
      return fullUrl;
    }
    
    // DigÌ†er durumlarda API_URL ile birlesÌ§tir
    const fullUrl = url.startsWith('/') ? `${API_URL}${url}` : `${API_URL}/${url}`;
    console.log('Genel URL olusÌ§turuldu:', fullUrl);
    return fullUrl;
  };

  // BasÌ§langÄ±cÌ§ta videolarÄ±n sesini kapatma
  useEffect(() => {
    // KullanÄ±cÄ± tercihi varsa kullan, yoksa varsayÄ±lan olarak ses kapalÄ±
    setMuted(reels.reduce((acc, _, index) => {
      acc[index] = true; // VarsayÄ±lan olarak sessiz basÌ§lat
      return acc;
    }, {}));
  }, [reels.length]);

  return (
    <div 
      className="relative h-screen w-full overflow-hidden"
      onTouchStart={handleTouchStart}
      onTouchEnd={handleTouchEnd}
      id="reels-container" // Wheel olayÄ± icÌ§in ID ekleme
      ref={reelsContainerRef}
    >
      {/* Toast bildirimlerini ekleyelim */}
      <Toaster position="bottom-center" />

      {/* Oturum acÌ§mamÄ±sÌ§ kullanÄ±cÄ±lar icÌ§in bilgi banner'Ä± - sadece token yoksa goÌˆsterilmeli */}
      {!token && (
        <AuthRequiredBanner onLogin={() => navigate('/login')} />
      )}
      
      {/* Arka plan efekti */}
      <div className="absolute inset-0 z-0">
        <SparklesCore
          id="reelsSparkles"
          background="transparent"
          minSize={0.4}
          maxSize={1.4}
          particleColor="#FFF"
          particleDensity={30}
          speed={0.6}
          className="w-full h-full"
        />
        <GlowingEffect className="h-full w-full" />
      </div>

      {/* UÌˆst BasÌ§lÄ±k ve Sekmeler */}
      <div className="absolute top-0 left-0 right-0 z-30">
        {/* BasÌ§lÄ±k */}
        <div className="p-4 flex items-center justify-between">
          <motion.button
            onClick={() => navigate('/')}
            className="p-2 rounded-full bg-black/30 backdrop-blur-md"
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
          >
            <ArrowLeft className="h-6 w-6 text-white" />
          </motion.button>
          <h1 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-blue-400">
            Reels
          </h1>
          <div className="w-10" /> {/* BosÌ§luk icÌ§in */}
        </div>

        {/* Sekmeler */}
        <div className="flex justify-center mb-2">
          <div className="flex space-x-10">
            {/* Takip Ettiklerim Sekmesi */}
            <div className="flex flex-col items-center">
              <motion.button
                onClick={() => setActiveTab('following')}
                variants={tabVariants}
                animate={activeTab === 'following' ? 'active' : 'inactive'}
                className="text-white font-medium px-2 py-1"
              >
                Takip Ettiklerim
              </motion.button>
              <motion.div 
                variants={underlineVariants}
                animate={activeTab === 'following' ? 'active' : 'inactive'}
                className="h-0.5 bg-gradient-to-r from-purple-400 to-blue-400 mt-1 rounded-full"
              />
            </div>

            {/* KesÌ§fet Sekmesi */}
            <div className="flex flex-col items-center">
              <motion.button
                onClick={() => setActiveTab('explore')}
                variants={tabVariants}
                animate={activeTab === 'explore' ? 'active' : 'inactive'}
                className="text-white font-medium px-2 py-1"
              >
                KesÌ§fet
              </motion.button>
              <motion.div 
                variants={underlineVariants}
                animate={activeTab === 'explore' ? 'active' : 'inactive'}
                className="h-0.5 bg-gradient-to-r from-purple-400 to-blue-400 mt-1 rounded-full"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Reels Ana IÌ‡cÌ§erik */}
      <div className="relative z-10 h-full w-full pt-24"> {/* pt-24 uÌˆst basÌ§lÄ±k ve sekmeler icÌ§in yer acÌ§ar */}
        {loading ? (
          <div className="h-full flex flex-col items-center justify-center">
            <motion.div 
              className="h-12 w-12 rounded-full border-4 border-t-purple-500 border-r-purple-300 border-b-transparent border-l-transparent"
              animate={{ 
                rotate: 360,
                transition: { 
                  duration: 1, 
                  ease: "linear",
                  repeat: Infinity
                }
              }}
            />
            <p className="mt-4 text-white/70">Reels yuÌˆkleniyor...</p>
          </div>
        ) : error ? (
          <div className="h-full flex flex-col items-center justify-center p-5">
            <AlertCircle className="h-12 w-12 text-red-500 mb-4" />
            <h3 className="text-xl font-medium text-white mb-3 text-center">Bir Hata OlusÌ§tu</h3>
            <p className="text-white/70 text-center mb-4">{error}</p>
            <div className="flex gap-4">
              <button 
                onClick={() => navigate('/')} 
                className="px-4 py-2 bg-slate-800 rounded-full text-white/80 font-medium"
              >
                Ana Sayfaya DoÌˆn
              </button>
              <button 
                onClick={fetchReels}
                className="px-4 py-2 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full text-white font-medium"
              >
                Tekrar Dene
              </button>
            </div>
          </div>
        ) : reels.length === 0 ? (
          <div className="h-full flex items-center justify-center">
            <div className="text-center p-5">
              <User className="h-16 w-16 mx-auto mb-4" style={{ color: "rgba(149, 76, 233, 0.7)" }} />
              <h3 className="text-xl font-medium text-white mb-2">
                {activeTab === 'following' ? 'Takip EttigÌ†in IÌ‡cÌ§erik Yok' : 'KesÌ§fet IÌ‡cÌ§erigÌ†i Yok'}
              </h3>
              <p className="text-white/70">
                {activeTab === 'following' 
                  ? 'HenuÌˆz takip ettigÌ†in kisÌ§ilerin Reels icÌ§erigÌ†i bulunmuyor.'
                  : 'HenuÌˆz kesÌ§fedilecek Reels icÌ§erigÌ†i bulunmuyor.'}
              </p>
            </div>
          </div>
        ) : (
          <div className="h-full">
            {/* Video GoÌˆruÌˆntuÌˆleyici - TikTok TarzÄ± Dikey KaydÄ±rma */}
            <div className="h-full relative flex justify-center overflow-hidden">
              {/* Video konteyneri */}
              <div 
                className="h-full aspect-[9/16] max-w-[500px] relative" 
                style={{
                  transition: 'transform 0.4s cubic-bezier(0.19, 1, 0.22, 1)'
                }}
              >
                {/* Videolar */}
                {reels.map((reel, index) => (
                  <div 
                    key={reel.id}
                    className={`absolute inset-0 w-full h-full bg-black transition-all duration-500 ${
                      index === currentReelIndex 
                        ? 'opacity-100 z-20 transform-none' 
                        : index < currentReelIndex 
                          ? 'opacity-0 z-10 transform -translate-y-full' 
                          : 'opacity-0 z-10 transform translate-y-full'
                    }`}
                  >
                    <div className="relative w-full h-full flex items-center justify-center">
                      {/* Video yuÌˆklenene kadar goÌˆsterilecek yuÌˆkleme ekranÄ± */}
                      {videoRefs.current[index]?.readyState < 3 && !videoErrors[index] && (
                        <div className="absolute inset-0 flex flex-col items-center justify-center z-10 bg-black bg-opacity-60 backdrop-blur-sm">
                          <div className="w-16 h-16 border-4 border-t-transparent border-purple-500 rounded-full animate-spin mb-4"></div>
                          <p className="text-white text-sm">Video yuÌˆkleniyor...</p>
                        </div>
                      )}
                      
                      {/* Video oynatma hatasÄ± durumunda goÌˆsterilecek ekran */}
                      {videoErrors[index] && (
                        <div className="absolute inset-0 flex flex-col items-center justify-center z-10 bg-black bg-opacity-60 backdrop-blur-sm">
                          <AlertCircle className="w-16 h-16 text-red-500 mb-4" />
                          <p className="text-white text-lg font-medium mb-2">Video yuÌˆklenemedi</p>
                          <p className="text-white/70 text-sm text-center max-w-xs mb-4">
                            Video yuÌˆklenirken bir sorun olusÌ§tu. Yedek video otomatik olarak yuÌˆkleniyor.
                          </p>
                        </div>
                      )}
                      
                      {/* Video elementi */}
                      <video
                        ref={el => { videoRefs.current[index] = el; }}
                        className="h-full w-full object-contain bg-black"
                        src={getProperVideoURL(reel.videoURL)}
                        loop
                        playsInline
                        muted={muted[index] ?? true}
                        onClick={() => togglePlay(index)}
                        onLoadedData={() => handleVideoLoad(index)}
                        onError={(e) => {
                          console.error('Video yuÌˆklenirken hata:', e);
                          setVideoErrors(prev => ({
                            ...prev,
                            [index]: true
                          }));
                          
                          toast.error('Video yuÌˆklenemedi, yedek video yuÌˆkleniyor');
                          
                          // Hata durumunda yedek video
                          if (videoRefs.current[index]) {
                            const fallbackUrl = 'https://storage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';
                            videoRefs.current[index].src = fallbackUrl;
                            videoRefs.current[index].load();
                          }
                        }}
                      />
                      
                      {/* Ses acÌ§ma/kapatma butonu */}
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleMute(index);
                        }}
                        className="absolute bottom-20 right-4 z-20 p-2 rounded-full bg-black/40 backdrop-blur-sm"
                      >
                        {muted[index] ? (
                          <VolumeX className="h-6 w-6 text-white" />
                        ) : (
                          <Volume2 className="h-6 w-6 text-white" />
                        )}
                      </button>
                      
                      {/* Video icÌ§erik katmanÄ± */}
                      <div className="absolute inset-0 flex flex-col justify-between pointer-events-none z-30">
                        {/* Bilgiler ve acÌ§Ä±klama */}
                        <div className="mt-auto p-4 pointer-events-auto">
                          {/* KullanÄ±cÄ± bilgileri ve video acÌ§Ä±klamasÄ± */}
                          <div className="flex items-center mb-3">
                            <motion.div 
                              className="relative rounded-full overflow-hidden h-12 w-12 mr-3 border-2" 
                              style={{ borderColor: "rgba(149, 76, 233, 0.7)" }}
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.95 }}
                            >
                              <img 
                                src={reel.user?.profileImage} 
                                alt={reel.user?.username}
                                className="h-full w-full object-cover"
                                onError={(e) => {
                                  e.target.src = "https://ui-avatars.com/api/?name=" + reel.user?.username + "&background=random";
                                }}
                              />
                            </motion.div>
                            <div className="flex-1">
                              <div className="flex items-center">
                                <h3 className="text-white font-semibold mr-2">@{reel.user?.username}</h3>
                                <motion.button
                                  className={`px-3 py-1 rounded-full text-xs font-medium ${
                                    reel.isLiked 
                                      ? 'bg-white/20 text-white' 
                                      : 'bg-gradient-to-r from-purple-500 to-blue-500 text-white'
                                  }`}
                                  whileHover={{ scale: 1.05 }}
                                  whileTap={{ scale: 0.95 }}
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    handleLike(reel.id);
                                  }}
                                >
                                  {reel.isLiked ? 'BegÌ†endim' : 'BegÌ†en'}
                                </motion.button>
                              </div>
                              <p className="text-white/80 text-sm line-clamp-2 mt-1">{reel.caption}</p>
                            </div>
                          </div>
                          
                          {/* MuÌˆzik bilgisi */}
                          <div className="flex items-center mt-2">
                            <div className="flex items-center bg-black/30 rounded-full px-3 py-1.5">
                              <Music className="h-4 w-4 mr-2 text-white/80" />
                              <p className="text-white/80 text-xs truncate max-w-[150px]">{reel.music || 'Original Sound'}</p>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      {/* Video kontrolleri ve isÌ§levleri - sagÌ† taraf */}
                      <div className="absolute right-4 bottom-24 flex flex-col items-center gap-6 pointer-events-auto z-30">
                        {/* BegÌ†en butonu */}
                        <motion.button 
                          className="flex flex-col items-center"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleLike(reel.id);
                          }}
                        >
                          <div 
                            className="rounded-full bg-black/30 p-3 backdrop-blur-sm"
                            style={reel.isLiked ? { background: 'rgba(255, 55, 95, 0.3)' } : {}}
                          >
                            <Heart 
                              className={`h-7 w-7 ${reel.isLiked ? 'text-red-500 fill-red-500' : 'text-white'}`}
                            />
                          </div>
                          <span className="text-white text-xs mt-1">{formatNumber(reel.likeCount)}</span>
                        </motion.button>
                        
                        {/* Yorum butonu */}
                        <motion.button 
                          className="flex flex-col items-center"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={(e) => {
                            e.stopPropagation();
                            // Yorum fonksiyonu buraya eklenecek
                          }}
                        >
                          <div className="rounded-full bg-black/30 p-3 backdrop-blur-sm">
                            <MessageCircle className="h-7 w-7 text-white" />
                          </div>
                          <span className="text-white text-xs mt-1">{formatNumber(reel.commentCount)}</span>
                        </motion.button>
                        
                        {/* PaylasÌ§ butonu */}
                        <motion.button 
                          className="flex flex-col items-center"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleShare(reel.id);
                          }}
                        >
                          <div className="rounded-full bg-black/30 p-3 backdrop-blur-sm">
                            <Share2 className="h-7 w-7 text-white" />
                          </div>
                          <span className="text-white text-xs mt-1">{formatNumber(reel.shareCount)}</span>
                        </motion.button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* KaydÄ±rma ipucu animasyonu */}
              {currentReelIndex < reels.length - 1 && (
                <div className="absolute bottom-14 left-1/2 transform -translate-x-1/2 z-30">
                  <motion.div
                    initial={{ opacity: 0.5, y: 0 }}
                    animate={{ opacity: 1, y: 10 }}
                    transition={{ 
                      repeat: Infinity, 
                      repeatType: "reverse", 
                      duration: 1.5 
                    }}
                  >
                    <ChevronDown className="h-6 w-6 text-white/70" />
                  </motion.div>
                </div>
              )}
              
              {/* Video sayacÄ± */}
              <div className="absolute top-4 left-4 bg-black/30 backdrop-blur-sm rounded-full px-3 py-1 z-30">
                <p className="text-white text-xs">
                  {currentReelIndex + 1} / {reels.length}
                </p>
              </div>
              
              {/* MasauÌˆstuÌˆ icÌ§in ekstra kontroller */}
              <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 z-30 hidden md:flex gap-4">
                <motion.button
                  className="p-2 rounded-full bg-black/30 backdrop-blur-sm"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => handleScroll('up')}
                  disabled={currentReelIndex === 0}
                  style={{ opacity: currentReelIndex === 0 ? 0.5 : 1 }}
                >
                  <ChevronUp className="h-6 w-6 text-white" />
                </motion.button>
                
                <motion.button
                  className="p-2 rounded-full bg-black/30 backdrop-blur-sm"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => handleScroll('down')}
                  disabled={currentReelIndex === reels.length - 1}
                  style={{ opacity: currentReelIndex === reels.length - 1 ? 0.5 : 1 }}
                >
                  <ChevronDown className="h-6 w-6 text-white" />
                </motion.button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Yeni Reel Ekleme Butonu - PaylasÌ§ butonu */}
      <motion.button
        className="absolute bottom-24 right-8 z-30 p-4 rounded-full backdrop-blur-md bg-purple-500/30 border border-purple-500/50 text-white shadow-lg"
        whileHover={{ 
          scale: 1.1,
          boxShadow: "0 0 20px rgba(149, 76, 233, 0.7)"
        }}
        whileTap={{ scale: 0.95 }}
        onClick={() => setShowShareModal(true)}
      >
        <Plus className="h-6 w-6" />
      </motion.button>

      {/* Modal Dialog */}
      <AnimatePresence>
        {showShareModal && (
          <motion.div 
            className="fixed inset-0 z-50 flex items-center justify-center"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {/* Arkaplan overlay */}
            <motion.div 
              className="absolute inset-0 bg-black/80 backdrop-blur-md"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowShareModal(false)}
            />
            
            {/* Modal icÌ§erigÌ†i */}
            <motion.div 
              className="bg-slate-900/70 backdrop-blur-md rounded-xl p-6 w-[90%] max-w-md z-10 border border-purple-500/30 shadow-[0_0_25px_rgba(149,76,233,0.3)]"
              initial={{ scale: 0.8, y: 30, opacity: 0 }}
              animate={{ scale: 1, y: 0, opacity: 1 }}
              exit={{ scale: 0.8, y: 30, opacity: 0 }}
              transition={{ type: "spring", damping: 25 }}
            >
              {/* Header */}
              <div className="flex justify-between items-center mb-5">
                <h2 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-blue-400">
                  Reels PaylasÌ§
                </h2>
                <motion.button 
                  className="p-2 rounded-full bg-slate-800/50 backdrop-blur-sm text-white/70"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setShowShareModal(false)}
                >
                  <X className="h-4 w-4" />
                </motion.button>
              </div>
              
              {/* PaylasÌ§Ä±m secÌ§enekleri */}
              <div className="grid grid-cols-2 gap-4 mb-6">
                <motion.button
                  className="bg-slate-800/70 hover:bg-slate-700/70 backdrop-blur-md p-4 rounded-xl flex flex-col items-center gap-3 transition-colors duration-300"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.97 }}
                  onClick={handleSelectVideo}
                >
                  <div className="h-12 w-12 rounded-full bg-purple-500/40 backdrop-blur-md border border-purple-500/50 flex items-center justify-center">
                    <Video className="h-6 w-6 text-white" />
                  </div>
                  <span className="text-white font-medium">Galeri</span>
                  <span className="text-white/60 text-xs text-center">Galeriden video secÌ§</span>
                </motion.button>
                
                <motion.button
                  className="bg-slate-800/70 hover:bg-slate-700/70 backdrop-blur-md p-4 rounded-xl flex flex-col items-center gap-3 transition-colors duration-300"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.97 }}
                  onClick={handleOpenCamera}
                >
                  <div className="h-12 w-12 rounded-full bg-purple-500/40 backdrop-blur-md border border-purple-500/50 flex items-center justify-center">
                    <Camera className="h-6 w-6 text-white" />
                  </div>
                  <span className="text-white font-medium">Kamera</span>
                  <span className="text-white/60 text-xs text-center">Yeni video cÌ§ek</span>
                </motion.button>
              </div>
              
              {/* Dosya yuÌˆkleme girisÌ§ alanÄ± */}
              <input 
                type="file" 
                ref={fileInputRef}
                accept="video/*" 
                className="hidden"
                onChange={handleFileChange}
              />
              
              {/* IÌ‡ptal butonu */}
              <div className="flex justify-center">
                <motion.button
                  className="px-5 py-2.5 rounded-lg bg-slate-800/50 backdrop-blur-sm text-white/70 hover:bg-slate-700/50 transition-colors duration-300"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setShowShareModal(false)}
                >
                  IÌ‡ptal
                </motion.button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* OÌˆnizleme ModalÄ± */}
      <AnimatePresence>
        {showPreviewModal && (
          <motion.div 
            className="fixed inset-0 z-50 flex items-center justify-center"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {/* Arkaplan overlay */}
            <motion.div 
              className="absolute inset-0 bg-black/80 backdrop-blur-md"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setShowPreviewModal(false)}
            />
            
            {/* Modal icÌ§erigÌ†i */}
            <motion.div 
              className="bg-slate-900/70 backdrop-blur-md rounded-xl p-6 w-[90%] max-w-md z-10 border border-purple-500/30 shadow-[0_0_25px_rgba(149,76,233,0.3)]"
              initial={{ scale: 0.8, y: 30, opacity: 0 }}
              animate={{ scale: 1, y: 0, opacity: 1 }}
              exit={{ scale: 0.8, y: 30, opacity: 0 }}
              transition={{ type: "spring", damping: 25 }}
            >
              {/* Header */}
              <div className="flex justify-between items-center mb-5">
                <h2 className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-blue-400">
                  Reel OÌˆnizleme
                </h2>
                <motion.button 
                  className="p-2 rounded-full bg-slate-800/50 backdrop-blur-sm text-white/70"
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={() => setShowPreviewModal(false)}
                >
                  <X className="h-4 w-4" />
                </motion.button>
              </div>
              
              {/* Video oÌˆnizleme */}
              <div className="h-80 w-full rounded-lg overflow-hidden mb-4">
                <video 
                  src={previewURL} 
                  className="h-full w-full object-cover" 
                  controls 
                  loop 
                  playsInline
                />
              </div>
              
              {/* AcÌ§Ä±klama ve muÌˆzik */}
              <div className="flex flex-col gap-2 mb-4">
                <input 
                  type="text" 
                  value={reelCaption} 
                  onChange={(e) => setReelCaption(e.target.value)}
                  className="bg-slate-800/70 p-3 rounded-lg text-white placeholder:text-white/70"
                  placeholder="Reel acÌ§Ä±klamasÄ±"
                />
                <input 
                  type="text" 
                  value={reelMusic} 
                  onChange={(e) => setReelMusic(e.target.value)}
                  className="bg-slate-800/70 p-3 rounded-lg text-white placeholder:text-white/70"
                  placeholder="MuÌˆzik"
                />
              </div>
              
              {/* PaylasÌ§ butonu */}
              <div className="flex justify-center">
                <motion.button
                  className="px-5 py-2.5 rounded-lg bg-gradient-to-r from-purple-500 to-blue-500 text-white font-medium"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={submitReel}
                >
                  PaylasÌ§
                </motion.button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Reels;